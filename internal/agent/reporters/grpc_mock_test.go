// Code generated by MockGen. DO NOT EDIT.
// Source: ../../../proto/metrics/metrics_grpc.pb.go
//
// Generated by this command:
//
//	mockgen -source=../../../proto/metrics/metrics_grpc.pb.go -destination=./grpc_mock_test.go -package=reporters_test -typed
//

// Package reporters_test is a generated GoMock package.
package reporters_test

import (
	context "context"
	reflect "reflect"

	metrics "github.com/novoseltcev/go-course/proto/metrics"
	gomock "go.uber.org/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockMetricsServiceClient is a mock of MetricsServiceClient interface.
type MockMetricsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServiceClientMockRecorder
	isgomock struct{}
}

// MockMetricsServiceClientMockRecorder is the mock recorder for MockMetricsServiceClient.
type MockMetricsServiceClientMockRecorder struct {
	mock *MockMetricsServiceClient
}

// NewMockMetricsServiceClient creates a new mock instance.
func NewMockMetricsServiceClient(ctrl *gomock.Controller) *MockMetricsServiceClient {
	mock := &MockMetricsServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetricsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsServiceClient) EXPECT() *MockMetricsServiceClientMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockMetricsServiceClient) GetAll(ctx context.Context, in *metrics.GetAllRequest, opts ...grpc.CallOption) (*metrics.GetAllResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAll", varargs...)
	ret0, _ := ret[0].(*metrics.GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetricsServiceClientMockRecorder) GetAll(ctx, in any, opts ...any) *MockMetricsServiceClientGetAllCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetricsServiceClient)(nil).GetAll), varargs...)
	return &MockMetricsServiceClientGetAllCall{Call: call}
}

// MockMetricsServiceClientGetAllCall wrap *gomock.Call
type MockMetricsServiceClientGetAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceClientGetAllCall) Return(arg0 *metrics.GetAllResponse, arg1 error) *MockMetricsServiceClientGetAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceClientGetAllCall) Do(f func(context.Context, *metrics.GetAllRequest, ...grpc.CallOption) (*metrics.GetAllResponse, error)) *MockMetricsServiceClientGetAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceClientGetAllCall) DoAndReturn(f func(context.Context, *metrics.GetAllRequest, ...grpc.CallOption) (*metrics.GetAllResponse, error)) *MockMetricsServiceClientGetAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOne mocks base method.
func (m *MockMetricsServiceClient) GetOne(ctx context.Context, in *metrics.GetOneRequest, opts ...grpc.CallOption) (*metrics.GetOneResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetOne", varargs...)
	ret0, _ := ret[0].(*metrics.GetOneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockMetricsServiceClientMockRecorder) GetOne(ctx, in any, opts ...any) *MockMetricsServiceClientGetOneCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockMetricsServiceClient)(nil).GetOne), varargs...)
	return &MockMetricsServiceClientGetOneCall{Call: call}
}

// MockMetricsServiceClientGetOneCall wrap *gomock.Call
type MockMetricsServiceClientGetOneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceClientGetOneCall) Return(arg0 *metrics.GetOneResponse, arg1 error) *MockMetricsServiceClientGetOneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceClientGetOneCall) Do(f func(context.Context, *metrics.GetOneRequest, ...grpc.CallOption) (*metrics.GetOneResponse, error)) *MockMetricsServiceClientGetOneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceClientGetOneCall) DoAndReturn(f func(context.Context, *metrics.GetOneRequest, ...grpc.CallOption) (*metrics.GetOneResponse, error)) *MockMetricsServiceClientGetOneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockMetricsServiceClient) Update(ctx context.Context, in *metrics.UpdateRequest, opts ...grpc.CallOption) (*metrics.UpdateResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Update", varargs...)
	ret0, _ := ret[0].(*metrics.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricsServiceClientMockRecorder) Update(ctx, in any, opts ...any) *MockMetricsServiceClientUpdateCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricsServiceClient)(nil).Update), varargs...)
	return &MockMetricsServiceClientUpdateCall{Call: call}
}

// MockMetricsServiceClientUpdateCall wrap *gomock.Call
type MockMetricsServiceClientUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceClientUpdateCall) Return(arg0 *metrics.UpdateResponse, arg1 error) *MockMetricsServiceClientUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceClientUpdateCall) Do(f func(context.Context, *metrics.UpdateRequest, ...grpc.CallOption) (*metrics.UpdateResponse, error)) *MockMetricsServiceClientUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceClientUpdateCall) DoAndReturn(f func(context.Context, *metrics.UpdateRequest, ...grpc.CallOption) (*metrics.UpdateResponse, error)) *MockMetricsServiceClientUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateBatch mocks base method.
func (m *MockMetricsServiceClient) UpdateBatch(ctx context.Context, in *metrics.UpdateBatchRequest, opts ...grpc.CallOption) (*metrics.UpdateBatchResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateBatch", varargs...)
	ret0, _ := ret[0].(*metrics.UpdateBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockMetricsServiceClientMockRecorder) UpdateBatch(ctx, in any, opts ...any) *MockMetricsServiceClientUpdateBatchCall {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, in}, opts...)
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockMetricsServiceClient)(nil).UpdateBatch), varargs...)
	return &MockMetricsServiceClientUpdateBatchCall{Call: call}
}

// MockMetricsServiceClientUpdateBatchCall wrap *gomock.Call
type MockMetricsServiceClientUpdateBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceClientUpdateBatchCall) Return(arg0 *metrics.UpdateBatchResponse, arg1 error) *MockMetricsServiceClientUpdateBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceClientUpdateBatchCall) Do(f func(context.Context, *metrics.UpdateBatchRequest, ...grpc.CallOption) (*metrics.UpdateBatchResponse, error)) *MockMetricsServiceClientUpdateBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceClientUpdateBatchCall) DoAndReturn(f func(context.Context, *metrics.UpdateBatchRequest, ...grpc.CallOption) (*metrics.UpdateBatchResponse, error)) *MockMetricsServiceClientUpdateBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockMetricsServiceServer is a mock of MetricsServiceServer interface.
type MockMetricsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServiceServerMockRecorder
	isgomock struct{}
}

// MockMetricsServiceServerMockRecorder is the mock recorder for MockMetricsServiceServer.
type MockMetricsServiceServerMockRecorder struct {
	mock *MockMetricsServiceServer
}

// NewMockMetricsServiceServer creates a new mock instance.
func NewMockMetricsServiceServer(ctrl *gomock.Controller) *MockMetricsServiceServer {
	mock := &MockMetricsServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetricsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsServiceServer) EXPECT() *MockMetricsServiceServerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockMetricsServiceServer) GetAll(arg0 context.Context, arg1 *metrics.GetAllRequest) (*metrics.GetAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", arg0, arg1)
	ret0, _ := ret[0].(*metrics.GetAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetricsServiceServerMockRecorder) GetAll(arg0, arg1 any) *MockMetricsServiceServerGetAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetricsServiceServer)(nil).GetAll), arg0, arg1)
	return &MockMetricsServiceServerGetAllCall{Call: call}
}

// MockMetricsServiceServerGetAllCall wrap *gomock.Call
type MockMetricsServiceServerGetAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceServerGetAllCall) Return(arg0 *metrics.GetAllResponse, arg1 error) *MockMetricsServiceServerGetAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceServerGetAllCall) Do(f func(context.Context, *metrics.GetAllRequest) (*metrics.GetAllResponse, error)) *MockMetricsServiceServerGetAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceServerGetAllCall) DoAndReturn(f func(context.Context, *metrics.GetAllRequest) (*metrics.GetAllResponse, error)) *MockMetricsServiceServerGetAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOne mocks base method.
func (m *MockMetricsServiceServer) GetOne(arg0 context.Context, arg1 *metrics.GetOneRequest) (*metrics.GetOneResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", arg0, arg1)
	ret0, _ := ret[0].(*metrics.GetOneResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockMetricsServiceServerMockRecorder) GetOne(arg0, arg1 any) *MockMetricsServiceServerGetOneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockMetricsServiceServer)(nil).GetOne), arg0, arg1)
	return &MockMetricsServiceServerGetOneCall{Call: call}
}

// MockMetricsServiceServerGetOneCall wrap *gomock.Call
type MockMetricsServiceServerGetOneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceServerGetOneCall) Return(arg0 *metrics.GetOneResponse, arg1 error) *MockMetricsServiceServerGetOneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceServerGetOneCall) Do(f func(context.Context, *metrics.GetOneRequest) (*metrics.GetOneResponse, error)) *MockMetricsServiceServerGetOneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceServerGetOneCall) DoAndReturn(f func(context.Context, *metrics.GetOneRequest) (*metrics.GetOneResponse, error)) *MockMetricsServiceServerGetOneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Update mocks base method.
func (m *MockMetricsServiceServer) Update(arg0 context.Context, arg1 *metrics.UpdateRequest) (*metrics.UpdateResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1)
	ret0, _ := ret[0].(*metrics.UpdateResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockMetricsServiceServerMockRecorder) Update(arg0, arg1 any) *MockMetricsServiceServerUpdateCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockMetricsServiceServer)(nil).Update), arg0, arg1)
	return &MockMetricsServiceServerUpdateCall{Call: call}
}

// MockMetricsServiceServerUpdateCall wrap *gomock.Call
type MockMetricsServiceServerUpdateCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceServerUpdateCall) Return(arg0 *metrics.UpdateResponse, arg1 error) *MockMetricsServiceServerUpdateCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceServerUpdateCall) Do(f func(context.Context, *metrics.UpdateRequest) (*metrics.UpdateResponse, error)) *MockMetricsServiceServerUpdateCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceServerUpdateCall) DoAndReturn(f func(context.Context, *metrics.UpdateRequest) (*metrics.UpdateResponse, error)) *MockMetricsServiceServerUpdateCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// UpdateBatch mocks base method.
func (m *MockMetricsServiceServer) UpdateBatch(arg0 context.Context, arg1 *metrics.UpdateBatchRequest) (*metrics.UpdateBatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateBatch", arg0, arg1)
	ret0, _ := ret[0].(*metrics.UpdateBatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateBatch indicates an expected call of UpdateBatch.
func (mr *MockMetricsServiceServerMockRecorder) UpdateBatch(arg0, arg1 any) *MockMetricsServiceServerUpdateBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateBatch", reflect.TypeOf((*MockMetricsServiceServer)(nil).UpdateBatch), arg0, arg1)
	return &MockMetricsServiceServerUpdateBatchCall{Call: call}
}

// MockMetricsServiceServerUpdateBatchCall wrap *gomock.Call
type MockMetricsServiceServerUpdateBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceServerUpdateBatchCall) Return(arg0 *metrics.UpdateBatchResponse, arg1 error) *MockMetricsServiceServerUpdateBatchCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceServerUpdateBatchCall) Do(f func(context.Context, *metrics.UpdateBatchRequest) (*metrics.UpdateBatchResponse, error)) *MockMetricsServiceServerUpdateBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceServerUpdateBatchCall) DoAndReturn(f func(context.Context, *metrics.UpdateBatchRequest) (*metrics.UpdateBatchResponse, error)) *MockMetricsServiceServerUpdateBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// mustEmbedUnimplementedMetricsServiceServer mocks base method.
func (m *MockMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricsServiceServer")
}

// mustEmbedUnimplementedMetricsServiceServer indicates an expected call of mustEmbedUnimplementedMetricsServiceServer.
func (mr *MockMetricsServiceServerMockRecorder) mustEmbedUnimplementedMetricsServiceServer() *MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricsServiceServer", reflect.TypeOf((*MockMetricsServiceServer)(nil).mustEmbedUnimplementedMetricsServiceServer))
	return &MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall{Call: call}
}

// MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall wrap *gomock.Call
type MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall) Return() *MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall) Do(f func()) *MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall) DoAndReturn(f func()) *MockMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// MockUnsafeMetricsServiceServer is a mock of UnsafeMetricsServiceServer interface.
type MockUnsafeMetricsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeMetricsServiceServerMockRecorder
	isgomock struct{}
}

// MockUnsafeMetricsServiceServerMockRecorder is the mock recorder for MockUnsafeMetricsServiceServer.
type MockUnsafeMetricsServiceServerMockRecorder struct {
	mock *MockUnsafeMetricsServiceServer
}

// NewMockUnsafeMetricsServiceServer creates a new mock instance.
func NewMockUnsafeMetricsServiceServer(ctrl *gomock.Controller) *MockUnsafeMetricsServiceServer {
	mock := &MockUnsafeMetricsServiceServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeMetricsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeMetricsServiceServer) EXPECT() *MockUnsafeMetricsServiceServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedMetricsServiceServer mocks base method.
func (m *MockUnsafeMetricsServiceServer) mustEmbedUnimplementedMetricsServiceServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedMetricsServiceServer")
}

// mustEmbedUnimplementedMetricsServiceServer indicates an expected call of mustEmbedUnimplementedMetricsServiceServer.
func (mr *MockUnsafeMetricsServiceServerMockRecorder) mustEmbedUnimplementedMetricsServiceServer() *MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedMetricsServiceServer", reflect.TypeOf((*MockUnsafeMetricsServiceServer)(nil).mustEmbedUnimplementedMetricsServiceServer))
	return &MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall{Call: call}
}

// MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall wrap *gomock.Call
type MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall) Return() *MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall {
	c.Call = c.Call.Return()
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall) Do(f func()) *MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall) DoAndReturn(f func()) *MockUnsafeMetricsServiceServermustEmbedUnimplementedMetricsServiceServerCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
