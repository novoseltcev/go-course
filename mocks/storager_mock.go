// Code generated by MockGen. DO NOT EDIT.
// Source: storager.go
//
// Generated by this command:
//
//	mockgen -source=storager.go -destination=../../mocks/storager_mock.go -package=mocks -typed
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	schemas "github.com/novoseltcev/go-course/internal/schemas"
	gomock "go.uber.org/mock/gomock"
)

// MockMetricStorager is a mock of MetricStorager interface.
type MockMetricStorager struct {
	ctrl     *gomock.Controller
	recorder *MockMetricStoragerMockRecorder
	isgomock struct{}
}

// MockMetricStoragerMockRecorder is the mock recorder for MockMetricStorager.
type MockMetricStoragerMockRecorder struct {
	mock *MockMetricStorager
}

// NewMockMetricStorager creates a new mock instance.
func NewMockMetricStorager(ctrl *gomock.Controller) *MockMetricStorager {
	mock := &MockMetricStorager{ctrl: ctrl}
	mock.recorder = &MockMetricStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricStorager) EXPECT() *MockMetricStoragerMockRecorder {
	return m.recorder
}

// GetAll mocks base method.
func (m *MockMetricStorager) GetAll(ctx context.Context) ([]schemas.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx)
	ret0, _ := ret[0].([]schemas.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockMetricStoragerMockRecorder) GetAll(ctx any) *MockMetricStoragerGetAllCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockMetricStorager)(nil).GetAll), ctx)
	return &MockMetricStoragerGetAllCall{Call: call}
}

// MockMetricStoragerGetAllCall wrap *gomock.Call
type MockMetricStoragerGetAllCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricStoragerGetAllCall) Return(arg0 []schemas.Metric, arg1 error) *MockMetricStoragerGetAllCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricStoragerGetAllCall) Do(f func(context.Context) ([]schemas.Metric, error)) *MockMetricStoragerGetAllCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricStoragerGetAllCall) DoAndReturn(f func(context.Context) ([]schemas.Metric, error)) *MockMetricStoragerGetAllCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// GetOne mocks base method.
func (m *MockMetricStorager) GetOne(ctx context.Context, id, mType string) (*schemas.Metric, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOne", ctx, id, mType)
	ret0, _ := ret[0].(*schemas.Metric)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOne indicates an expected call of GetOne.
func (mr *MockMetricStoragerMockRecorder) GetOne(ctx, id, mType any) *MockMetricStoragerGetOneCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOne", reflect.TypeOf((*MockMetricStorager)(nil).GetOne), ctx, id, mType)
	return &MockMetricStoragerGetOneCall{Call: call}
}

// MockMetricStoragerGetOneCall wrap *gomock.Call
type MockMetricStoragerGetOneCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricStoragerGetOneCall) Return(arg0 *schemas.Metric, arg1 error) *MockMetricStoragerGetOneCall {
	c.Call = c.Call.Return(arg0, arg1)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricStoragerGetOneCall) Do(f func(context.Context, string, string) (*schemas.Metric, error)) *MockMetricStoragerGetOneCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricStoragerGetOneCall) DoAndReturn(f func(context.Context, string, string) (*schemas.Metric, error)) *MockMetricStoragerGetOneCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// Save mocks base method.
func (m *MockMetricStorager) Save(ctx context.Context, metric *schemas.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, metric)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save.
func (mr *MockMetricStoragerMockRecorder) Save(ctx, metric any) *MockMetricStoragerSaveCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockMetricStorager)(nil).Save), ctx, metric)
	return &MockMetricStoragerSaveCall{Call: call}
}

// MockMetricStoragerSaveCall wrap *gomock.Call
type MockMetricStoragerSaveCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricStoragerSaveCall) Return(arg0 error) *MockMetricStoragerSaveCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricStoragerSaveCall) Do(f func(context.Context, *schemas.Metric) error) *MockMetricStoragerSaveCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricStoragerSaveCall) DoAndReturn(f func(context.Context, *schemas.Metric) error) *MockMetricStoragerSaveCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}

// SaveBatch mocks base method.
func (m *MockMetricStorager) SaveBatch(ctx context.Context, metrics []schemas.Metric) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBatch", ctx, metrics)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBatch indicates an expected call of SaveBatch.
func (mr *MockMetricStoragerMockRecorder) SaveBatch(ctx, metrics any) *MockMetricStoragerSaveBatchCall {
	mr.mock.ctrl.T.Helper()
	call := mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBatch", reflect.TypeOf((*MockMetricStorager)(nil).SaveBatch), ctx, metrics)
	return &MockMetricStoragerSaveBatchCall{Call: call}
}

// MockMetricStoragerSaveBatchCall wrap *gomock.Call
type MockMetricStoragerSaveBatchCall struct {
	*gomock.Call
}

// Return rewrite *gomock.Call.Return
func (c *MockMetricStoragerSaveBatchCall) Return(arg0 error) *MockMetricStoragerSaveBatchCall {
	c.Call = c.Call.Return(arg0)
	return c
}

// Do rewrite *gomock.Call.Do
func (c *MockMetricStoragerSaveBatchCall) Do(f func(context.Context, []schemas.Metric) error) *MockMetricStoragerSaveBatchCall {
	c.Call = c.Call.Do(f)
	return c
}

// DoAndReturn rewrite *gomock.Call.DoAndReturn
func (c *MockMetricStoragerSaveBatchCall) DoAndReturn(f func(context.Context, []schemas.Metric) error) *MockMetricStoragerSaveBatchCall {
	c.Call = c.Call.DoAndReturn(f)
	return c
}
